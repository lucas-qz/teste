# ETAPA 1 - CONFIGURAR ESSE ARQUIVO COM O PASSO A PASSO DO (CD)
name: PIPELINE CD - DEPLOY

on: # --- Define quando o pipeline será acionado ------------------------------
  push:           # qndo vc fizer um push para a branch 'main' do GitHub esse pipeline será acionado
    branches: [ "master" ]

jobs: # --- Define os Jobs a serem executados -----------------------------------
  build-and-push:  # nesse job vai os passos abaixo. Veja oque faz um por um ----
    name: Build and Push Docker Image to Docker Hub  # nome desse Job
    runs-on: ubuntu-latest # S.O onde o pipeline será executado (*veja explicação no final desse arquivo)

    steps: # Abaixo estão os passos desse Job
      # 1 - Checkout do repositório
      - name: Checkout repository # nome pra esse passo
        uses: actions/checkout@v3

      # 2 - Login no Docker Hub
      - name: Log in to Docker Hub # nome pra esse passo
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # SECRETY - usuario do Docker Hub
          password: ${{ secrets.DOCKER_PASSWORD }} # SECRETY - senha do Docker Hub

      # 3 - Build da imagem Docker
      - name: Build Docker image # nome pra esse passo
        run: | 
          # comando pra fazer build da imagem
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest .

      # 4 - Push da imagem para o Docker Hub
      - name: Push Docker image # nome pra esse passo
        run: |
          # comando pra mandar a imagem pro Docker Hub
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:  # nesse job vai os passos abaixo. Veja oque faz um por um
    name: Deploy Docker Container on EC2  # nome desse Job
    needs: build-and-push  # Esse job será executado após o "build-and-push"
    runs-on: ubuntu-latest # S.O onde o pipeline será executado (*veja explicação no final desse arquivo)

    steps: # Abaixo estão os passos desse Job -------------------------------------
      # 1 - Configurar acesso SSH
      - name: Setup SSH
        run: |
          # cria o diretório .ssh
          mkdir -p ~/.ssh
          # acessa a instancia EC2
          # SE DER ERRO TALVES SEJA NECESSARIO NA INSTANCIA VC RODAR: ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -C "github-actions"
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          # da permissão em /ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # verifica a autenticidade do host
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      # Deploy na instância EC2
      # 2 - Subir os containers no servidor
      - name: Criar container no EC2
        run: |
          # faz conexão com a instancia EC2        
          ssh ubuntu@${{ secrets.EC2_HOST }} "
          # da stop no container caso ele exista
          docker stop ${{ secrets.DOCKER_CONTAINER_NAME }}   || true
          # exclui no container caso ele exista          
          docker rm -f ${{ secrets.DOCKER_CONTAINER_NAME }}   || true
          # exclui a imagem
          docker rmi -f ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }} || true
          # importa a imagem do Docker Hub para a instancia
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
          # com a imagem, ele cria o container
          docker run -d --name ${{ secrets.DOCKER_CONTAINER_NAME }}  -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
          "
 
 