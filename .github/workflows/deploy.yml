name: Deploy to EKS

on:
  push:
    branches: ['master']

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Verifica o código
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configura o AWS CLI
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Altere para sua região

    # 3. Instala o eksctl
    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin

    # 4. Configura o cluster EKS
    - name: Update kubeconfig
      run: eksctl utils write-kubeconfig --cluster=meu-cluster --region=us-east-1

    # 2 - Login no Docker Hub
    - name: Log in to Docker Hub # nome pra esse passo
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }} # SECRETY - usuario do Docker Hub
        password: ${{ secrets.DOCKER_PASSWORD }} # SECRETY - senha do Docker Hub

    # 5. Faz o build da imagem Docker
    #- name: Build and Push Docker Image
    #  uses: docker/build-push-action@v5
    #  with:
    #    context: .
    #    file: ./Dockerfile
    #    push: true
    #    tags: lucasqz/kubernetes2:${{ github.sha }}

    # 3 - Build da imagem Docker
    - name: Build Docker image # nome pra esse passo
      run: | 
        # comando pra fazer build da imagem
        docker build -t lucasqz/kubernetes2:${{ github.sha }} .
    # 4 - Push da imagem para o Docker Hub
    - name: Push Docker image # nome pra esse passo
      run: |
        # comando pra mandar a imagem pro Docker Hub
        docker push lucasqz/kubernetes2:${{ github.sha }}

#    # 6. Faz o deploy no cluster Kubernetes
#    - name: Deploy to Kubernetes
#      run: |
#        # 'my-app' é o nome do container (tenho um documento explicando como descobrir o nome do container **mas pod ver no proprio yaml do kubernetes)
#        # ele tenta atualizar o container, mas se der errado por conta do container ainda não existir, ele vai rodar o outro comando de baixo
#        kubectl set image deployment/my-app my-app=lucasqz/kubernetes2:${{ github.sha }}
#        #kubectl apply -f kubernetes.yaml
#        kubectl rollout status deployment/my-app
        
        
    # 6. Atualiza ou cria o Deployment no Kubernetes
    - name: Check if Deployment Exists
      id: check-deployment
      run: |
        if kubectl get deployment my-app >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "exists=false" >> $GITHUB_ENV
        fi

    - name: Handle Deployment
      run: |
        if [ "${{ env.exists }}" = "true" ]; then
          echo "Updating existing Deployment..."
          kubectl set image deployment/my-app my-app=lucasqz/kubernetes2:${{ github.sha }}
        else
          echo "Creating new Deployment..."
          cat <<EOF > kubernetes.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: my-app
            labels:
              app: my-app
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: my-app
            template:
              metadata:
                labels:
                  app: my-app
              spec:
                containers:
                - name: my-app
                  image: lucasqz/kubernetes2:${{ github.sha }}
                  ports:
                  - containerPort: 8000

          ---

          apiVersion: v1
          kind: Service
          metadata:
            name: my-app-service
          spec:
            type: LoadBalancer
            selector:
              app: my-app
            ports:
            - protocol: TCP
              port: 80
              targetPort: 8000
          EOF
          kubectl apply -f kubernetes.yaml
        fi