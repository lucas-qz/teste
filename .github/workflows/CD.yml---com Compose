# ETAPA 1 - CONFIGURAR ESSE ARQUIVO COM O PASSO A PASSO DO (CD)
name: PIPELINE CD - DEPLOY

on: # --- Define quando o pipeline será acionado ------------------------------
  push:           # qndo vc fizer um push para a branch 'main' do GitHub esse pipeline será acionado
    branches: [ "master" ]

jobs: # --- Define os Jobs a serem executados -----------------------------------
  build-and-push:  # nesse job vai os passos abaixo. Veja oque faz um por um ----
    name: Build and Push Docker Image to Docker Hub  # nome desse Job
    runs-on: ubuntu-latest # S.O onde o pipeline será executado (*veja explicação no final desse arquivo)

    steps: # Abaixo estão os passos desse Job
      # 1 - Checkout do repositório
      - name: Checkout repository # nome pra esse passo
        uses: actions/checkout@v3

      # 2 - Login no Docker Hub
      - name: Log in to Docker Hub # nome pra esse passo
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # SECRETY - usuario do Docker Hub
          password: ${{ secrets.DOCKER_PASSWORD }} # SECRETY - senha do Docker Hub

      # 3 - Build da imagem Docker
      - name: Build Docker image # nome pra esse passo
        run: | 
          # comando pra fazer build da imagem
          cd ./django
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:dj .
          cd ../mysql
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:my .
      # 4 - Push da imagem para o Docker Hub
      - name: Push Docker image # nome pra esse passo
        run: |
          # comando pra mandar a imagem pro Docker Hub
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:dj
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:my

  deploy-to-ec2:  # nesse job vai os passos abaixo. Veja oque faz um por um ----
    name: Deploy na AEC2  # nome desse Job
    needs: build-and-push  # Esse job só será executado se os comandos de  "build" e "push" acima derem certo
    runs-on: ubuntu-latest # S.O onde o pipeline será executado (*veja explicação no final desse arquivo)

    steps: # Abaixo estão os passos desse Job
      # 1 - Checkout do repositório
      - name: Checkout repository # nome pra esse passo
        uses: actions/checkout@v3

      # 2. Configurar Python (se necessário para dependências)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      # 3. Configurar secrets e permissões
      - name: Configure SSH Access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/aws-key.pem
          chmod 600 ~/.ssh/aws-key.pem
  
      # 4. Copiar arquivos para o servidor
      - name: Transfer files to AWS
        run: |
          scp -i ~/.ssh/aws-key.pem -o "StrictHostKeyChecking=no" \
            -r ./docker-compose.yml ./config ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/
  
      # 5. Conectar e realizar o deploy no servidor
      - name: Deploy Docker Compose on AWS
        run: |
          ssh -i ~/.ssh/aws-key.pem -o "StrictHostKeyChecking=no" ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu
            
            # Parar e remover containers existentes (se necessário)
            docker-compose down || true
  
            # exclui todas as imagens (**o 'f' é p q ele ñ peça pra confirmar o comando)
            docker image prune -af || true
  
            # Recriar containers
            docker-compose up -d --build
          EOF
